[[plugins]] # denite
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
hook_add = '''
    nnoremap [denite] <Nop>
    nmap <Leader>d [denite]
    nnoremap <silent> [denite]h :<C-u>Denite file_mru<CR>
    nnoremap <silent> [denite]g :<C-u>Denite grep -buffer-name=search-buffer-denite<CR>
    nnoremap <silent> [denite]r :<C-u>Denite -resume -buffer-name=search-buffer-denite<CR>
    nnoremap <silent> [denite]f :<C-u>Denite file_rec<CR>
    nnoremap <silent> [denite]l :<C-u>Denite line<CR>
    nnoremap <silent> [denite]y :<C-u>Denite neoyank<CR>
    nnoremap sb :<C-u>Denite buffer<CR>
'''
hook_source = '''
    call denite#custom#var('file_rec', 'command', ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
    call denite#custom#var('grep', 'command', ['ag'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', [])
    call denite#custom#var('grep', 'default_opts', ['--follow', '--no-group', '--no-color'])
'''

[[plugins]] # neoyank
repo = 'Shougo/neoyank.vim'
on_event = 'TextYankPost'
on_if = 1
on_source = 'denite.nvim'

[[plugins]] # neomru
repo = 'Shougo/neomru.vim'
on_source = 'denite.nvim'

[[plugins]] # deol
repo = 'Shougo/deol.nvim'
on_cmd = 'Deol'
depends = 'denite.nvim'
hook_add = '''
    nmap     <Leader>s [deol]
    nnoremap <silent> [deol]n :<C-u>call deol#new({'command': 'fish'})<CR>
    nnoremap <silent> [deol]s :<C-u>Deol<CR>
'''
# hook_source = '''
#   autocmd MyAutoCmd FileType deol call s:on_deol()
#   function! s:on_deol() abort
#     nnoremap <buffer><silent> [Space]gc :<C-u>call deol#send('git commit')<CR>
#     nnoremap <buffer><silent> [Space]gA :<C-u>call deol#send('git commit --amend')<CR>
#   endfunction
# '''

[[plugins]] # deoplete
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
on_i = 1
hook_source = '''
    call deoplete#enable()
'''

[[plugins]] # syntax
repo = 'Shougo/neco-syntax'

[[plugins]] # complete vim
repo = 'Shougo/neco-vim'
on_ft = 'vim'

[[plugins]] # complete include files
repo = 'Shougo/neoinclude.vim'
on_ft = ['c', 'cpp']

[[plugins]] # neosnippet
repo = 'Shougo/neosnippet'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertCharPre'
on_ft = 'snippet'
hook_add = '''
    imap <C-k> <Plug>(neosnippet_jump_or_expand)
    smap <C-k> <Plug>(neosnippet_jump_or_expand)
    xmap <C-k> <Plug>(neosnippet_expand_target)
'''
hook_source = '''
    let g:neosnippet#enable_snipmate_compatibility = 1
    let g:neosnippet#enable_completed_snippet = 1
    let g:neosnippet#expand_word_boundary = 1
'''

[[plugins]] # snippet
repo = 'Shougo/neosnippet-snippets'

[[plugins]] # echodoc
repo = 'Shougo/echodoc.vim'
on_event = 'CompleteDone'
hook_source = '''
    call echodoc#enable()
'''

[[plugins]] # filetype
repo = 'Shougo/context_filetype.vim'

[[plugins]] # ctrlp
repo = 'ctrlpvim/ctrlp.vim'
hook_add = '''
    nnoremap <silent> <leader>b :CtrlPBuffer<CR>
    nnoremap <silent> <Leader>u :CtrlPMRUFiles<CR>
'''

[[plugins]] # browser
repo = 'tyru/open-browser.vim'

[[plugins]] # submode
repo = 'kana/vim-submode'
on_event = 'VimEnter'
hook_source = '''
    call submode#enter_with('bufmove', 'n', '', 's>', '<C-w>>')
    call submode#enter_with('bufmove', 'n', '', 's<', '<C-w><')
    call submode#enter_with('bufmove', 'n', '', 's+', '<C-w>+')
    call submode#enter_with('bufmove', 'n', '', 's-', '<C-w>-')
    call submode#map('bufmove', 'n', '', '>', '<C-w>>')
    call submode#map('bufmove', 'n', '', '<', '<C-w><')
    call submode#map('bufmove', 'n', '', '+', '<C-w>+')
    call submode#map('bufmove', 'n', '', '-', '<C-w>-')
'''

[[plugins]] # nerdtree
repo = 'scrooloose/nerdtree'
depends = ['vim-nerdtree-syntax-highlight', 'vim-devicons']
hook_add = '''
    nnoremap [nerdtree] <Nop>
    nmap     <Leader>n [nerdtree]
    nnoremap <silent> [nerdtree]h :NERDTree<CR>
    nnoremap <silent> [nerdtree]n :NERDTreeFind<CR>
'''

[[plugins]] # nerdtree highlight
repo = 'tiagofumo/vim-nerdtree-syntax-highlight'
hook_add = '''
    nnoremap [gitgutter] <Nop>
    nmap     <Leader>g [gitgutter]
    nnoremap <silent> [gitgutter] :GitGutterToggle<CR>
    let g:NERDTreeLimitedSyntax = 1
'''

[[plugins]] # fugitive
repo = 'tpope/vim-fugitive'

[[plugins]] # gitgutter
repo = 'airblade/vim-gitgutter'
hook_add = '''
    let g:gitgutter_enabled = 0
'''

# [[plugins]] # LaTeX
# repo = 'lervag/vimtex'
# on_ft = 'tex'
# hook_add = '''
#     let g:vimtex_compiler_latexmk = {
#     \   'background': 1,
#     \   'build_dir': '',
#     \   'continuous': 1,
#     \   'options': [
#     \       '-pdfdvi',
#     \       '-verbose',
#     \       '-file-line-error',
#     \       '-synctex=1',
#     \       '-interaction=nonstopmode',
#     \   ],
#     \}
#     let g:vimtex_compiler_progname = 'nvr'
#     let g:vimtex_view_general_viewer
#     \   = '/Applications/Skim.app/Contents/SharedSupport/displayline'
#     let g:vimtex_view_general_options = '-g -r @line @pdf @tex'
#     let g:vimtex_view_method='skim'
# '''

[[plugins]] # c complete
repo = 'Shougo/deoplete-clangx'
on_ft = ['c', 'cpp']

[[plugins]] # python complete
repo = 'zchee/deoplete-jedi'
on_ft = 'python'

[[plugins]] # go syntax
# repo = 'zchee/nvim-go'
# build = 'make'
repo = 'fatih/vim-go'
on_ft = 'go'
hook_add = '''
    " :nextなどでバッファ移動時にファイルが変更されていれば書き込む
    autocmd MyAutoCmd FileType go set autowrite
    " :GoInfo更新時間 Default->800
    autocmd MyAutoCmd FileType go set updatetime=100
    " :GoPlayでページをブラウザに読み込まない Default->1
    let g:go_play_open_browser = 0
    " キャメルケースに変換(defalut snake_cake)
    let g:go_addtags_transform = "camelcase"
    " カーソル上のワードに対して:GoInfo実行
    let g:go_auto_type_info = 1
'''

[[plugins]] # go complete
repo = 'zchee/deoplete-go'
build = 'make'
on_ft = 'go'
depends = ['deoplete.nvim']
hook_source = '''
    let g:deoplete#sources#go#gocode_binary = $GOPATH . '/bin/gocode'
'''

[[plugins]] # slim syntax
repo = 'slim-template/vim-slim'
on_ft = 'slim'

[[plugins]] # HTML5 syntax
repo = 'othree/html5.vim'
on_ft = 'html'

[[plugins]] # javascript
repo = 'pangloss/vim-javascript'
on_ft = ['javascript', 'javascript.jsx']

[[plugins]] # jsx syntax
repo = 'maxmellon/vim-jsx-pretty'
on_ft = ['javascript', 'javascript.jsx']

[[plugins]] # javascript-libraries-systax
repo = 'othree/javascript-libraries-syntax.vim'
on_ft = ['javascript', 'javascript.jsx']

[[plugins]] # ECMAScript future syntax
repo = 'othree/es.next.syntax.vim'
on_ft = ['c', 'cpp', 'css', 'go', 'html', 'java', 'javascript', 'javascript.jsx', 'python']

[[plugins]] # vim-maktaba
repo = 'google/vim-maktaba'
on_ft = ['c', 'cpp', 'css', 'go', 'html', 'java', 'javascript', 'javascript.jsx', 'python']

[[plugins]] # vim-codefmt
repo = 'google/vim-codefmt'
on_ft = ['c', 'cpp', 'css', 'go', 'html', 'java', 'javascript', 'javascript.jsx', 'python']
hook_source = '''
    nnoremap [codefmt] <Nop>
    nmap     <Leader>a [codefmt]
    nnoremap <silent>[codefmt] :FormatCode<CR>
'''

[[plugins]] # vim-maktaba
repo = 'google/vim-glaive'
on_ft = ['javascript', 'javascript.jsx']

[[plugins]] # markdown syntax
repo = 'rcmdnk/vim-markdown'
on_ft = ['md', 'markdown']
hook_source = ''' "
    let g:vim_markdown_folding_disabled = 1
'''
[[plugins]] # markdown preview
repo = 'previm/previm'
depends = 'open-browser.vim'
on_ft = ['md', 'markdown']
hook_source = '''
    let g:previm_enable_realtime = 1
'''
[[plugins]] # GitHub Flavored Markdown
repo = 'rhysd/vim-gfm-syntax'
on_event = 'BufRead'
on_ft = ['md', 'markdown']

[[plugins]] # Toml syntax
repo  = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]] # YAML syntax
repo = 'stephpy/vim-yaml'
on_ft = 'yaml'

[[plugins]] # gnuplot syntax
repo = 'vim-scripts/gnuplot.vim'
on_ft = 'gp'

[[plugins]] # fish syntax
repo = 'vim-scripts/fish-syntax'
on_ft = 'fish'

[[plugins]] # help-ja
repo = 'vim-jp/vimdoc-ja'
on_cmd = ['h', 'help']

[[plugins]] # swift
repo = 'keith/swift.vim'
on_ft = 'swift'

[[plugins]] # Applescript
repo = 'vim-scripts/applescript.vim'
on_ft = 'applescript'

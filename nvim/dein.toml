[[plugins]] # dein
repo = 'Shougo/dein.vim'

[[plugins]] # denite
repo = 'Shougo/denite.nvim'
hook_add = '''
    nnoremap sT :<C-u>Denite tab<CR>
    nnoremap sb :<C-u>Denite buffer_tab -buffer-name=file<CR>
    nnoremap sB :<C-u>Denite buffer -buffer-name=file<CR>
'''

[[plugins]] # deoplete
repo = 'Shougo/deoplete.nvim'

[[plugins]] # icons
repo = 'ryanoasis/vim-devicons'
hook_add = '''
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
'''

[[plugins]] # nerdtree
repo = 'scrooloose/nerdtree'
[[plugins]]
repo = 'tiagofumo/vim-nerdtree-syntax-highlight'
hook_add = '''
    let g:NERDTreeLimitedSyntax = 1
'''

[[plugins]] # fugitive
repo = 'tpope/vim-fugitive'

[[plugins]] # gitgutter
repo = 'airblade/vim-gitgutter'
hook_add = '''
    let g:gitgutter_enabled = 0
'''

[[plugins]] # iceberg
repo = 'cocopon/iceberg.vim'

[[plugins]] # ALE
repo = 'w0rp/ale'
hook_add = '''
    let g:ale_set_loclist = 0
    let g:ale_set_quickfix = 1
    let g:ale_sign_column_always = 1
    let g:ale_sign_error = "\uf057"
    let g:ale_sign_warning = "\uf06a"
    let g:ale_statusline_format = ["\uf057 %d", "\uf06a %d", "\uf058"]
    let g:ale_echo_msg_error_str = 'E'
    let g:ale_echo_msg_warning_str = 'W'
    let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
    let g:ale_open_list = 1
    let g:ale_lint_on_save = 1
    let g:ale_lint_on_text_changed = 0
    let g:ale_linters= {
    \   'c':["gcc"],
    \   'cpp':["g++"],
    \}
'''

[[plugins]] # lightline
repo = 'itchyny/lightline.vim'
hook_add = '''
    let g:lightline = {
    \    'colorscheme' : 'iceberg',
    \    'active': {
    \       'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'readonly', 'filename', 'modified' ] ],
    \       'right': [ [ 'lineinfo' ], [ 'percent' ], [ 'fileformat', 'fileencoding', 'filetype'], [ 'linter_errors', 'linter_warnings', 'linter_ok' ]]
    \    },
    \    'component_function':{
    \       'fugitive': 'LightLineFugitive',
    \       'readonly': 'LightLineReadonly',
    \       'modified': 'LightLineModified',
    \       'filename': 'LightLineFilename',
    \       'filetype': 'LightLineFiletype',
    \       'fileformat': 'LightLineFileformat',
    \    },
    \    'component_expand': {
    \       'linter_warnings': 'LightlineLinterWarnings',
    \       'linter_errors': 'LightlineLinterErrors',
    \       'linter_ok': 'LightlineLinterOK'
    \    },
    \    'component_type': {
    \       'linter_warnings': 'warning',
    \       'linter_errors': 'error',
    \    },
    \    'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
    \    'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" }
    \ }

    function! LightLineModified()
        if &filetype == "help"
            return ""
        elseif &modified
            return "\uf040"
        elseif &modifiable
            return ""
        else
            return ""
        endif
    endfunction

    function! LightLineReadonly()
        if &filetype == "help"
            return ""
        elseif &readonly
            return "\uf023"
        else
            return ""
        endif
    endfunction

    function! LightLineFugitive()
        if exists("*fugitive#head")
            let _ = fugitive#head()
            return strlen(_) ? "\ue725 "._ : ''
        endif
        return ''
    endfunction

    function! LightLineFilename()
        return ('' != expand('%:p') ? winwidth(0) > 90 ? expand('%:p') : expand('%:t') : '[No Name]')
    endfunction

    function! LightLineFiletype()
      return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
    endfunction

    function! LightLineFileformat()
      return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
    endfunction

    function! LightlineLinterErrors() abort
      let l:counts = ale#statusline#Count(bufnr(''))
      let l:all_errors = l:counts.error + l:counts.style_error
      let l:all_non_errors = l:counts.total - l:all_errors
      return l:all_errors == 0 ? '' : printf("\uf057 %d", all_errors)
    endfunction

    function! LightlineLinterWarnings() abort
      let l:counts = ale#statusline#Count(bufnr(''))
      let l:all_errors = l:counts.error + l:counts.style_error
      let l:all_non_errors = l:counts.total - l:all_errors
      return l:all_non_errors == 0 ? '' : printf("\uf06a %d", all_non_errors)
    endfunction

    function! LightlineLinterOK() abort
      let l:counts = ale#statusline#Count(bufnr(''))
      let l:all_errors = l:counts.error + l:counts.style_error
      let l:all_non_errors = l:counts.total - l:all_errors
      return l:counts.total == 0 ? "\uf058" : ''
    endfunction

    " hide --INSERT--
    set noshowmode
'''

[[plugins]] # submode
repo = 'kana/vim-submode'
hook_add = '''
    call submode#enter_with('bufmove', 'n', '', 's>', '<C-w>>')
    call submode#enter_with('bufmove', 'n', '', 's<', '<C-w><')
    call submode#enter_with('bufmove', 'n', '', 's+', '<C-w>+')
    call submode#enter_with('bufmove', 'n', '', 's-', '<C-w>-')
    call submode#map('bufmove', 'n', '', '>', '<C-w>>')
    call submode#map('bufmove', 'n', '', '<', '<C-w><')
    call submode#map('bufmove', 'n', '', '+', '<C-w>+')
    call submode#map('bufmove', 'n', '', '-', '<C-w>-')
'''

[[plugins]] #quickrun
repo = 'thinca/vim-quickrun'
hook_add = '''
    let g:quickrun_config = {
    \   'tex': {
    \       'command' : 'latexmk',
    \       'cmdopt' : '-pv',
    \       'exec' : '%c %o %s',
    \       'outputter' : 'error',
    \       'outputter/error/success' : 'null',
    \       'outputter/error/error' : 'quickfix',
    \       'srcfile' : expand("%"),
    \       'hook/sweep/files' : [
    \           '%S:p:r.aux',
    \           '%S:p:r.bbl',
    \           '%S:p:r.blg',
    \           '%S:p:r.dvi',
    \           '%S:p:r.fdb_latexmk',
    \           '%S:p:r.fls',
    \           '%S:p:r.log',
    \           '%S:p:r.out'
    \       ],
    \   },
    \}
'''

[[plugins]] #highlight in toml
repo = 'inkarkat/vim-ingo-library'
[[plugins]]
repo = 'inkarkat/vim-SyntaxRange'
depends = 'vim-ingo-library'

[[plugins]] # dein
repo = 'Shougo/dein.vim'

[[plugins]] # defx
repo = 'Shougo/defx.nvim'
hook_add = '''
    autocmd MyAutoCmd FileType defx call s:defx_my_settings()
        function! s:defx_my_settings() abort
         " Define mappings
          nnoremap <silent><buffer><expr> <CR>
         \ defx#do_action('open')
          nnoremap <silent><buffer><expr> l
         \ defx#do_action('open')
          nnoremap <silent><buffer><expr> E
         \ defx#do_action('open', 'vsplit')
          nnoremap <silent><buffer><expr> K
         \ defx#do_action('new_directory')
          nnoremap <silent><buffer><expr> N
         \ defx#do_action('new_file')
          nnoremap <silent><buffer><expr> d
         \ defx#do_action('remove')
          nnoremap <silent><buffer><expr> r
         \ defx#do_action('rename')
          nnoremap <silent><buffer><expr> h
         \ defx#do_action('cd', ['..'])
          nnoremap <silent><buffer><expr> ~
         \ defx#do_action('cd')
          nnoremap <silent><buffer><expr> q
         \ defx#do_action('quit')
          nnoremap <silent><buffer><expr> <Space>
         \ defx#do_action('toggle_select') . 'j'
          nnoremap <silent><buffer><expr> j
         \ line('.') == line('$') ? 'gg' : 'j'
          nnoremap <silent><buffer><expr> k
         \ line('.') == 1 ? 'G' : 'k'
          nnoremap <silent><buffer><expr> <C-l>
         \ defx#do_action('redraw')
          nnoremap <silent><buffer><expr> <C-g>
         \ defx#do_action('print')
        endfunction
'''

[[plugins]] # vimproc
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]] # iceberg
repo = 'cocopon/iceberg.vim'
hook_add = '''
    autocmd MyAutoCmd ColorScheme * highlight Normal guibg=none
    autocmd MyAutoCmd ColorScheme * highlight EndOfBuffer guifg=#161821
    autocmd MyAutoCmd ColorScheme * highlight EndOfBuffer guibg=none
    autocmd MyAutoCmd ColorScheme * highlight CursorLineNr guifg=#777ea4
    autocmd MyAutoCmd ColorScheme * highlight SpecialKey guifg=#84a0c6
    autocmd MyAutoCmd ColorScheme * highlight SpecialKey guibg=none
    " replace #b4be82 to 9ac684
    autocmd MyAutoCmd ColorScheme * highlight MoreMsg guifg=#9ac684
    autocmd MyAutoCmd ColorScheme * highlight PreProc guifg=#9ac684
    autocmd MyAutoCmd ColorScheme * highlight Question guifg=#9ac684
    autocmd MyAutoCmd ColorScheme * highlight Special guifg=#9ac684
    autocmd MyAutoCmd ColorScheme * highlight diffAdded guifg=#9ac684
    autocmd MyAutoCmd ColorScheme * highlight EasyMotionTarget guifg=#9ac684
    autocmd MyAutoCmd ColorScheme * highlight GitGutterAdd guifg=#9ac684
    let g:terminal_color_2 = '#9ac684'

    autocmd MyAutoCmd VimEnter * nested colorscheme iceberg
    autocmd MyAutoCmd VimEnter * nested highlight clear CursorLine
'''

[[plugins]] # icons
repo = 'ryanoasis/vim-devicons'
hook_add = '''
    let g:WebDevIconsUnicodeDecorateFolderNodes = 1
'''

[[plugins]] # ALE
repo = 'w0rp/ale'
hook_add = '''
    nnoremap [ale] <Nop>
    nmap     <Leader>a [ale]
    nnoremap <silent> [ale] :ALEToggle<CR>
    let g:ale_set_loclist = 0
    let g:ale_set_quickfix = 1
    let g:ale_sign_error = "\uf057"
    let g:ale_sign_warning = "\uf06a"
    let g:ale_statusline_format = ["\uf057 %d", "\uf06a %d", "\uf058"]
    let g:ale_echo_msg_error_str = 'E'
    let g:ale_echo_msg_warning_str = 'W'
    let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
    let g:ale_open_list = 1
    let g:ale_lint_on_enter = 0
    let g:ale_lint_on_insert_leave = 0
    let g:ale_lint_on_text_changed = 0
    let g:ale_lint_on_save = 1

    let g:ale_linters = {
    \   'c': ['clang'],
    \   'cpp': ['clang'],
    \   'python': ['flake8'],
    \}
'''

[[plugins]] # lightline
repo = 'itchyny/lightline.vim'
depends = 'vim-fugitive'
hook_add = '''
    let g:lightline = {
    \    'colorscheme' : 'iceberg',
    \    'active': {
    \       'left': [[ 'mode', 'paste' ], [ 'fugitive', 'readonly', 'filename', 'modified' ]],
    \       'right': [[ 'lineinfo' ], [ 'percent' ], [ 'fileformat', 'fileencoding', 'filetype'], [ 'linter_errors', 'linter_warnings', 'linter_ok' ]]
    \    },
    \    'component_function':{
    \       'fugitive': 'LightLineFugitive',
    \       'readonly': 'LightLineReadonly',
    \       'modified': 'LightLineModified',
    \       'filename': 'LightLineFilename',
    \       'filetype': 'LightLineFiletype',
    \       'fileformat': 'LightLineFileformat',
    \    },
    \    'component_expand': {
    \       'linter_warnings': 'LightlineLinterWarnings',
    \       'linter_errors': 'LightlineLinterErrors',
    \       'linter_ok': 'LightlineLinterOK'
    \    },
    \    'component_type': {
    \       'linter_warnings': 'warning',
    \       'linter_errors': 'error',
    \    },
    \    'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
    \    'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" }
    \}

    function! LightLineModified()
        if &filetype == 'help'
            return ''
        elseif &modified
            return "\uf040"
        elseif &modifiable
            return ''
        else
            return ''
        endif
    endfunction

    function! LightLineReadonly()
        if &filetype == 'help'
            return ''
        elseif &readonly
            return "\uf023"
        else
            return ''
        endif
    endfunction

    function! LightLineFugitive()
        if &filetype !~? 'vimfiler\|gundo' && exists('*fugitive#head')
            let _ = fugitive#head()
            return strlen(_) ? "\ue725 "._ : ''
        else
            return ''
        endif
    endfunction

    function! LightLineFilename()
        return ('' != expand('%:p') ? winwidth(0) > 90 ? expand('%:p') : expand('%:t') : '[No Name]')
    endfunction

    function! LightLineFiletype()
        return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
    endfunction

    function! LightLineFileformat()
        return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
    endfunction

    function! LightlineLinterErrors() abort
        let l:counts = ale#statusline#Count(bufnr(''))
        let l:all_errors = l:counts.error + l:counts.style_error
        let l:all_non_errors = l:counts.total - l:all_errors
        return l:all_errors == 0 ? '' : printf("\uf057 %d", all_errors)
    endfunction

    function! LightlineLinterWarnings() abort
        let l:counts = ale#statusline#Count(bufnr(''))
        let l:all_errors = l:counts.error + l:counts.style_error
        let l:all_non_errors = l:counts.total - l:all_errors
        return l:all_non_errors == 0 ? '' : printf("\uf06a %d", all_non_errors)
    endfunction

    function! LightlineLinterOK() abort
        let l:counts = ale#statusline#Count(bufnr(''))
        let l:all_errors = l:counts.error + l:counts.style_error
        let l:all_non_errors = l:counts.total - l:all_errors
        return l:counts.total == 0 ? "\uf058" : ''
    endfunction

    " hide --INSERT--
    set noshowmode
'''

# [[plugins]] # tmuxline
# repo = 'edkolev/tmuxline.vim'
# hook_add = '''
# let g:tmuxline_preset = {
#     \ 'a' : '#S',
#     \ 'c' : ['#(whoami)', '#(uptime | cud -d " " -f 1,2,3)'],
#     \ 'win' : ['#I', '#W'],
#     \ 'cwin' : ['#I', '#W', '#F'],
#     \ 'x' : '#(date)',
#     \ 'y' : ['%R', '%a', '%Y'],
#     \ 'z' : '#H'
#     \ }
# let g:tmuxline_theme = 'iceberg'
# '''

[[plugins]] # quickrun
repo = 'thinca/vim-quickrun'
depends = 'vimproc'
hook_add = '''
    let g:quickrun_config = {
    \   '_': {
    \       'outputter' : 'error',
    \       "outputter/buffer/close_on_empty" : 1,
    \       'outputter/error/success' : 'null',
    \       'outputter/error/error' : 'quickfix',
    \       'runner': 'vimproc',
    \       'runner/vimproc/updatetime' : 40,
    \   },
    \   'tex': {
    \       'command' : 'latexmk',
    \       'cmdopt' : '-pv',
    \       'exec' : '%c %o %s',
    \       'srcfile' : expand("%"),
    \       'hook/sweep/files' : [
    \           '%S:p:r.aux',
    \           '%S:p:r.bbl',
    \           '%S:p:r.blg',
    \           '%S:p:r.dvi',
    \           '%S:p:r.fdb_latexmk',
    \           '%S:p:r.fls',
    \           '%S:p:r.log',
    \           '%S:p:r.out'
    \       ],
    \   },
    \}
'''

[[plugins]] # switch filetype
repo = 'osyo-manga/vim-precious'
depends = 'context_filetype.vim'

[[plugins]] # comment
repo = 'tyru/caw.vim'
hook_add = '''
    nmap <silent><Leader>c <Plug>(caw:zeropos:toggle)
    vmap <silent><Leader>c <Plug>(caw:zeropos:toggle)
'''

[[plugins]] # fzf
repo = 'junegunn/fzf'
build = './install --all'
merged =  0
[[plugins]] # fzf
repo = 'junegunn/fzf.vim'
depends = 'fzf'
hook_add = '''
    nnoremap [fzf] <Nop>
    nmap     <Leader>f [fzf]
    nnoremap <silent> [fzf]a :Ag<CR>
    nnoremap <silent> [fzf]b :Buffers<CR>
    nnoremap <silent> [fzf]x :Commands<CR>
    nnoremap <silent> [fzf]f :Files<CR>
    command! FZFMru call fzf#run({
    \  'source':  v:oldfiles,
    \  'sink':    'e',
    \  'options': '-m -x +s',
    \  'down':    '40%'})
    nnoremap <silent> [fzf]r :FZFMru<CR>
'''

[[plugins]] # table-mode
repo = 'dhruvasagar/vim-table-mode'

[[plugins]] # easymotion
repo = 'Lokaltog/vim-easymotion'
